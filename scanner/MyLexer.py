# Generated from MyLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,163,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,
        1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,
        1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,
        1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,
        1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,
        1,21,1,22,1,22,5,22,131,8,22,10,22,12,22,134,9,22,1,23,4,23,137,
        8,23,11,23,12,23,138,1,24,1,24,1,24,1,24,5,24,145,8,24,10,24,12,
        24,148,9,24,1,24,1,24,1,24,1,24,1,24,1,25,4,25,156,8,25,11,25,12,
        25,157,1,25,1,25,1,26,1,26,1,146,0,27,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,1,0,4,2,0,
        65,90,97,122,3,0,48,57,65,90,97,122,1,0,48,57,3,0,9,10,13,13,32,
        32,166,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,0,53,1,0,0,0,1,55,1,0,0,0,3,58,1,0,0,0,5,63,1,0,0,
        0,7,68,1,0,0,0,9,72,1,0,0,0,11,79,1,0,0,0,13,85,1,0,0,0,15,91,1,
        0,0,0,17,98,1,0,0,0,19,100,1,0,0,0,21,102,1,0,0,0,23,104,1,0,0,0,
        25,106,1,0,0,0,27,108,1,0,0,0,29,110,1,0,0,0,31,112,1,0,0,0,33,114,
        1,0,0,0,35,116,1,0,0,0,37,118,1,0,0,0,39,120,1,0,0,0,41,122,1,0,
        0,0,43,125,1,0,0,0,45,128,1,0,0,0,47,136,1,0,0,0,49,140,1,0,0,0,
        51,155,1,0,0,0,53,161,1,0,0,0,55,56,5,105,0,0,56,57,5,102,0,0,57,
        2,1,0,0,0,58,59,5,101,0,0,59,60,5,108,0,0,60,61,5,115,0,0,61,62,
        5,101,0,0,62,4,1,0,0,0,63,64,5,118,0,0,64,65,5,111,0,0,65,66,5,105,
        0,0,66,67,5,100,0,0,67,6,1,0,0,0,68,69,5,105,0,0,69,70,5,110,0,0,
        70,71,5,116,0,0,71,8,1,0,0,0,72,73,5,114,0,0,73,74,5,101,0,0,74,
        75,5,112,0,0,75,76,5,101,0,0,76,77,5,97,0,0,77,78,5,116,0,0,78,10,
        1,0,0,0,79,80,5,98,0,0,80,81,5,114,0,0,81,82,5,101,0,0,82,83,5,97,
        0,0,83,84,5,107,0,0,84,12,1,0,0,0,85,86,5,117,0,0,86,87,5,110,0,
        0,87,88,5,116,0,0,88,89,5,105,0,0,89,90,5,108,0,0,90,14,1,0,0,0,
        91,92,5,114,0,0,92,93,5,101,0,0,93,94,5,116,0,0,94,95,5,117,0,0,
        95,96,5,114,0,0,96,97,5,110,0,0,97,16,1,0,0,0,98,99,5,59,0,0,99,
        18,1,0,0,0,100,101,5,44,0,0,101,20,1,0,0,0,102,103,5,91,0,0,103,
        22,1,0,0,0,104,105,5,93,0,0,105,24,1,0,0,0,106,107,5,40,0,0,107,
        26,1,0,0,0,108,109,5,41,0,0,109,28,1,0,0,0,110,111,5,123,0,0,111,
        30,1,0,0,0,112,113,5,125,0,0,113,32,1,0,0,0,114,115,5,43,0,0,115,
        34,1,0,0,0,116,117,5,45,0,0,117,36,1,0,0,0,118,119,5,42,0,0,119,
        38,1,0,0,0,120,121,5,61,0,0,121,40,1,0,0,0,122,123,5,61,0,0,123,
        124,5,61,0,0,124,42,1,0,0,0,125,126,5,33,0,0,126,127,5,61,0,0,127,
        44,1,0,0,0,128,132,7,0,0,0,129,131,7,1,0,0,130,129,1,0,0,0,131,134,
        1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,46,1,0,0,0,134,132,1,
        0,0,0,135,137,7,2,0,0,136,135,1,0,0,0,137,138,1,0,0,0,138,136,1,
        0,0,0,138,139,1,0,0,0,139,48,1,0,0,0,140,141,5,47,0,0,141,142,5,
        42,0,0,142,146,1,0,0,0,143,145,9,0,0,0,144,143,1,0,0,0,145,148,1,
        0,0,0,146,147,1,0,0,0,146,144,1,0,0,0,147,149,1,0,0,0,148,146,1,
        0,0,0,149,150,5,42,0,0,150,151,5,47,0,0,151,152,1,0,0,0,152,153,
        6,24,0,0,153,50,1,0,0,0,154,156,7,3,0,0,155,154,1,0,0,0,156,157,
        1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,159,1,0,0,0,159,160,
        6,25,0,0,160,52,1,0,0,0,161,162,9,0,0,0,162,54,1,0,0,0,5,0,132,138,
        146,157,1,6,0,0
    ]

class MyLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    VOID = 3
    INT = 4
    REPEAT = 5
    BREAK = 6
    UNTIL = 7
    RETURN = 8
    SEMI = 9
    COMMA = 10
    LBRACK = 11
    RBRACK = 12
    LPAREN = 13
    RPAREN = 14
    LBRACE = 15
    RBRACE = 16
    PLUS = 17
    MINUS = 18
    STAR = 19
    EQUAL = 20
    EQ = 21
    NEQ = 22
    ID = 23
    NUM = 24
    COMMENT = 25
    WS = 26
    INVALID = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'void'", "'int'", "'repeat'", "'break'", 
            "'until'", "'return'", "';'", "','", "'['", "']'", "'('", "')'", 
            "'{'", "'}'", "'+'", "'-'", "'*'", "'='", "'=='", "'!='" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "VOID", "INT", "REPEAT", "BREAK", "UNTIL", "RETURN", 
            "SEMI", "COMMA", "LBRACK", "RBRACK", "LPAREN", "RPAREN", "LBRACE", 
            "RBRACE", "PLUS", "MINUS", "STAR", "EQUAL", "EQ", "NEQ", "ID", 
            "NUM", "COMMENT", "WS", "INVALID" ]

    ruleNames = [ "IF", "ELSE", "VOID", "INT", "REPEAT", "BREAK", "UNTIL", 
                  "RETURN", "SEMI", "COMMA", "LBRACK", "RBRACK", "LPAREN", 
                  "RPAREN", "LBRACE", "RBRACE", "PLUS", "MINUS", "STAR", 
                  "EQUAL", "EQ", "NEQ", "ID", "NUM", "COMMENT", "WS", "INVALID" ]

    grammarFileName = "MyLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


